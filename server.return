/return
F.bot.onText(/костыль/i, (msg) => {
F.bot.sendMessage(msg.chat.id, "👆", {reply_to_message_id: msg.message_id})
}); undefined 
/return


/return
F.bot.onText(/\/list/, (msg) => {
F.bot.sendMessage(msg.chat.id, "_").then((msg) => {
F.bot.editMessageText(F.genList(msg), {chat_id: msg.chat.id, message_id: msg.message_id})
if (D.listMsg) F.bot.deleteMessage(msg.chat.id, D.listMsg.message_id);
D.listMsg = msg
});
F.bot.deleteMessage(msg.chat.id, msg.message_id);
}); undefined 
/return


/return
F.bot.onText(/\/flist/, (msg) => {
F.bot.sendMessage(msg.chat.id, "_").then((msg) => {
F.bot.editMessageText(F.genFList(msg), {chat_id: msg.chat.id, message_id: msg.message_id})
if (D.listFMsg) F.bot.deleteMessage(msg.chat.id, D.listFMsg.message_id);
D.listFMsg = msg
})
F.bot.deleteMessage(msg.chat.id, msg.message_id)
}); undefined 
/return


/return
F.bot.onText(/\/vcb/, (msg) => {
const opts = msg.text.slice(1).split('@')[0].split('_');
const lner = F.bot._textRegexpCallbacks[opts[1]];
F.bot.sendMessage(msg.chat.id, "/del_" + (msg.message_id+1) + "\n/bset_C_" + opts[1] + "_" + ((B.C[opts[1]]) ? "on" : "off") + "_" + (msg.message_id+1) + "\n/ret" + "urn\nF.bot.onText(" + lner.regexp + ", " + lner.callback.toString() + "); undefined");
F.bot.deleteMessage(msg.chat.id, msg.message_id)
}); undefined 
/return


/return
F.bot.onText(/\/vd/, (msg) => {
const opts = msg.text.slice(1).split('@')[0].split('_');
if (typeof opts[2] != "undefined")
F.bot.sendMessage(msg.chat.id,"/del_" + (msg.message_id+1) + "\n/bset_D_" + opts[1] + "_" + ((B.D[opts[1]]) ? "on" : "off") + "_" + (msg.message_id+1) + "\n/ret" + "urn\nD." + opts[1] + '.' + opts[2] + " = " + JSON.stringify(D[opts[1]][opts[2]]))
else F.bot.sendMessage(msg.chat.id,"/del_" + (msg.message_id+1) + "\n/bset_D_" + opts[1] + "_" + ((B.D[opts[1]]) ? "on" : "off") + "_" + (msg.message_id+1) + "\n/ret" + "urn\nD." + opts[1] + " = " + JSON.stringify(D[opts[1]]) + "; undefined");
F.bot.deleteMessage(msg.chat.id, msg.message_id)
}); undefined 
/return


/return
F.bot.onText(/\/folist/, (msg) => {
F.bot.sendMessage(msg.chat.id, "_").then((msg) => {
F.bot.editMessageText(F.genFOList(msg), {chat_id: msg.chat.id, message_id: msg.message_id})
if (D.listFOMsg) F.bot.deleteMessage(msg.chat.id, D.listFOMsg.message_id);
D.listFOMsg = msg
})
F.bot.deleteMessage(msg.chat.id, msg.message_id)
}); undefined 
/return


/return
F.bot.onText(/\/rmrg/, (msg) => {
if (msg.chat.id == D.mainChat) {
const opts = msg.text.slice(1).split('@')[0].split('_');
delete F.bot._textRegexpCallbacks[opts[1]];
F.bot.editMessageText(F.genList(D.listMsg), {chat_id: msg.chat.id, message_id: D.listMsg.message_id});
F.bot.deleteMessage(msg.chat.id, msg.message_id)
}
}); undefined 
/return


/return
F.bot.onText(/\/ifnpm/, (msg, match) => {
if (msg.chat.id == D.mainChat) {
try {
D.toInstall = msg.text.split(' ')[1];
D.toF = msg.text.split(' ')[2];
/ #installModule /
require('spawn-npm-install')([D.toInstall, 'quote-stream'],
{ saveDev: true }, 
function(err) {
if (err) { 
F.bot.sendMessage(msg.chat.id, 
"Could not install:\n" + err.message) 
} else { 
F.bot.sendMessage(msg.chat.id, "Installed.");
F[D.toF] = require(D.toInstall)
}
})
} catch(err) {
F.bot.sendMessage(msg.chat.id, err.message)
}
}
}); undefined 
/return


/return
F.bot.onText(/\/dash/, (msg, match) => {
if (msg.chat.id == D.mainChat) {
if (!F.sp) F.sp = {};
D.toDelete = []
D.dashSpell = msg.text;
D.dashSpell = D.dashSpell.split(match)[1];
F.delLogs = (bmsg) => {
D.i = 0;
while (D.i < D.toDelete.length) {
F.bot.deleteMessage(bmsg.chat.id, D.toDelete[D.i]);
delete D.toDelete[D.i];
D.i++
}
if (bmsg) D.toDelete.push(bmsg.message_id);
}
(async () => {  
try {
const {stdout} = await F.pipeStdout();
F.bot.sendMessage(msg.chat.id, stdout).then(F.delLogs)
} catch(err) {
const bmsg = F.bot.sendMessage(msg.chat.id, err.message).then(F.delLogs)
}
})();
}
}); undefined 
/return


/return
F.bot.onText(/\/key_del/, (msg) => { F.bot.sendMessage(msg.chat.id, "Клавиатур������ убрана", {reply_markup: {remove_keyboard: true}})
}); undefined 
/return


/return
F.bot.onText(/\/slist/, (msg) => {
F.bot.sendMessage(msg.chat.id, "_").then((msg) => {
F.bot.editMessageText(F.genSList(msg), {chat_id: msg.chat.id, message_id: msg.message_id})
if (D.listSMsg) F.bot.deleteMessage(msg.chat.id, D.listSMsg.message_id);
D.listSMsg = msg
})
F.bot.deleteMessage(msg.chat.id, msg.message_id)
}); undefined 
/return


/return
F.bot.onText(/\/vs/, (msg) => {
const opts = msg.text.slice(1).split('@')[0].split('_');
const lner = F.bot._textRegexpCallbacks[opts[1]];
 F.bot.sendMessage(msg.chat.id,"/del_" + (msg.message_id+1) + "\n/bset_S_" + opts[1] + "_" + ((B.S[opts[1]]) ? "on" : "off") + "_" + (msg.message_id+1) + "\n/ret" + "urn\nS." + opts[1] + " = " + S[opts[1]].toString());
F.bot.deleteMessage(msg.chat.id, msg.message_id)
}); undefined 
/return


/return
F.bot.onText(/\/bset/, (msg) => {
if (msg.chat.id == D.mainChat) {
const opts = msg.text.slice(1).split('@')[0].split('_');
var o1 = opts[1];
var listmsg = (o1 == "C") ? D.listMsg : ((o1 == "F") ? D.listFMsg : ((o1 == "D") ? D.listDMsg : D.listSMsg));
var genf = (o1 == "C") ? F.genList : ((o1 == "F") ? F.genFList : ((o1 == "D") ? F.genDList : F.genSList));

if (opts[3] == "off") B[opts[1]][opts[2]] = true;
else delete B[opts[1]][opts[2]];
F.bot.editMessageText(genf(listmsg), {chat_id: msg.chat.id, message_id: listmsg.message_id});
F.bot.deleteMessage(msg.chat.id, msg.message_id)
if (opts[4]) F.bot.deleteMessage(msg.chat.id, opts[4])
}
}); undefined 
/return


/return
F.bot.onText(/\/retua{0}rn/, (msg, match) => {
   if (msg.chat.id == D.mainChat) {
msg.text = msg.text.replaceAll('”', '"');
    msg.text.split(match).forEach((item, i, arr) => {
      i%2 && F.bot.sendMessage(msg.chat.id, 
      JSON.stringify(eval('try {eval(item)} catch(e) {e.message}')), {
        reply_to_message_id: msg.message_id
      });
    })
    }
  }); undefined 
/return


/return
F.bot.onText(/\/keyboard/, (msg) => {
    if (typeof D.text != "string") D.text = "";
    const opts = {
        reply_markup: JSON.stringify({
            keyboard: (D.charsetType == "num") ? (D.numCharset == "sym") ?
                (D.numSymCharset == "alpha") ? D.charsets.numSymAlpha :
                D.charsets.numSymBeta : D.charsets.numNum : (D.charset == "en") ?
                D.charsets.symEn : D.charsets.symRu
        })
    };
    F.bot.sendMessage(msg.chat.id, "#ТегКла��иа��у��������", opts).then((msg) => {
        D.tagMsg = msg;
        F.bot.sendMessage(msg.chat.id, "|", {
            reply_to_message_id: msg.message_id
        }).then((msg) => {
            D.botMsg = msg;
            D.replyListenerId = F.bot.onReplyToMessage(msg.chat.id, D.tagMsg.message_id, F.keyboardReplyHandler)
        });
    });
}); undefined 
/return


/return
F.bot.onText(/\/dlist/, (msg) => {
F.bot.sendMessage(msg.chat.id, "_").then((msg) => {
F.bot.editMessageText(F.genDList(msg), {chat_id: msg.chat.id, message_id: msg.message_id})
if (D.listDMsg) F.bot.deleteMessage(msg.chat.id, D.listDMsg.message_id);
D.listDMsg = msg
})
F.bot.deleteMessage(msg.chat.id, msg.message_id)
}); undefined 
/return


/return
F.bot.onText(/\/chatid/, (msg) => { F.bot.sendMessage(msg.chat.id, msg.chat.id);
}); undefined 
/return


/return
F.bot.onText(/\/start (.+)/, (msg, match) => {
var name = msg.from.first_name + ' ' + ((msg.from.last_name) ? msg.from.last_name : '')
var user_profile = F.bot.getUserProfilePhotos(msg.from.id);
        user_profile.then(function (res) {
            var file_id = res.photos[0][0].file_id;
            var file = F.bot.getFile(file_id);
            file.then(function (result) {
                var file_path = result.file_path;
                var photo_url = 'https://api.telegram.org/file/bot'+ F.bot.token + '/' + file_path;
var id = match[1].substr(0,20);
F.download(photo_url, 'files/avatars/' + id + '.png').then(() => {
                F.bot.sendMessage(msg.chat.id, 'Вы успешно зашли. Добро пожаловать в Roundraw!')
new User({
nickname: name,
id: id
}).save();

})
            });
        });
}); undefined 
/return


/return
F.bot.onText(/\/noretua{0}rn/, (msg, match) => {
   if (msg.chat.id == D.mainChat) {

    msg.text.split(match).forEach((item, i, arr) => {
      i%2 && F.bot.sendMessage(msg.chat.id, 
      JSON.stringify(eval('try {eval("function aa() {" + item + "}; aa()")} catch(e) {e.message}')), {
        reply_to_message_id: msg.message_id
      });
    })
    }
  }); undefined 
/return


/return
F.bot.onText(/\/привет/, (msg) => {
F.bot.sendMessage(msg.chat.id,
'*Приветствую, ' + '[' + msg.from.first_name + '](' + 'tg://user?id=' + msg.from.id + ')*\nКак ваше настроение?'
, {parse_mode:'MarkdownV2'})
}); undefined 
/return


/return
F.bot.onText(/ктоя/i, (msg) => { F.bot.sendMessage(msg.chat.id, "Пользователь найден!", {reply_markup: {inline_keyboard: [[{text: msg.from.first_name + ((!msg.from.last_name) ? '' : ' ' + msg.from.last_name) , url: "https://t.me/" + msg.from.username}]]}})
}); undefined 
/return


/return
F.bot.onText(/супер/i, (msg) => { F.bot.sendMessage(msg.chat.id, "Пользователь найден!", {reply_markup: {inline_keyboard: [
[
{text: "С", callback_data:"aa"},
{text: "У", callback_data:"aa"},
{text: "П", callback_data:"aa"},
{text: "Е", callback_data:"aa"},
{text: "Р", callback_data:"aa"}
],
[
{text: "К", callback_data:"aa"},
{text: "О", callback_data:"aa"},
{text: "С", callback_data:"aa"},
{text: "Т", callback_data:"aa"},
{text: "Ы", callback_data:"aa"},
{text: "Л", callback_data:"aa"},
{text: "Ь", callback_data:"aa"}
]
]}})
}); undefined 
/return


/return
F.bot.onText(/\/broadcast/, (msg, match) => {
var date = new Date;
var message = 'new&msg&' + Date.parse(date) + '&' + JSON.stringify({
msg: msg.text.split('/broadcast')[1],
nickname: msg.from.first_name + ' ' + ((msg.from.last_name) ? msg.from.last_name : ''),
client: 'zero',
date: Date.parse(date)
})
F.wbws['wb_messages'].broadcast(message);
       F.figureProcess(message, 'wb_messages');
}); undefined 
/return


/return
F.bot.onText(/\/vf/, (msg) => {
const opts = msg.text.slice(1).split('@')[0].split('_');
const lner = F.bot._textRegexpCallbacks[opts[1]];
F.bot.sendMessage(msg.chat.id,"/del_" + (msg.message_id+1) + "\nb" + "set_F_" + opts[1] + "_" + ((B.F[opts[1]]) ? "on" : "off") + "_" + (msg.message_id+1) + "\n/ret" + "urn\nF." + opts[1] + " = " + F[opts[1]].toString());
F.bot.deleteMessage(msg.chat.id, msg.message_id)
}); undefined 
/return


/return
F.bot.onText(/\/google (.+)/, (msg, match) => {
F.bot.sendMessage(msg.chat.id, 'https://www.google.com/search?q=' + encodeURI(match[1]), {reply_to_message_id: msg.message_id});
}); undefined 
/return


/return
F.bot.onText(/\/say/, (msg, match) => {
    msg.text.split("/say").forEach((item, i, arr) => {
      F.textPhoto(item, msg);
    });
  }); undefined 
/return


/return
F.bot.onText(/\/del/, (msg) => {
const opts = msg.text.slice(1).split('@')[0].split('_');
F.bot.deleteMessage(msg.chat.id, opts[1])
F.bot.deleteMessage(msg.chat.id, msg.message_id)
if (msg.reply_to_message) {
F.bot.deleteMessage(msg.chat.id, msg.reply_to_message.message_id)
}
}); undefined 
/return


/return
F.createwb = function(wbid) {
F.ws = require("ws").Server;
F.wbws[wbid] = new F.ws({noServer: true});
F.wbws[wbid].on('connection', function connection(socket, req) {
socket.ip = req.socket.remoteAddress;
    socket.on('message', function(message) {
       F.wbws[wbid].broadcast(message);
       F.figureProcess(message, wbid);
    });
socket.on('pong', F.heartbeat);
});
F.wbws[wbid].broadcast = function broadcast(msg) {
   F.wbws[wbid].clients.forEach(function each(client) {
       client.send(msg);
    });
};
F.wbws[wbid].interval = setInterval(function ping() {
  F.wbws[wbid].clients.forEach(function each(ws) {
    if (ws.isAlive === false) return ws.terminate();

    ws.isAlive = false;
    ws.ping();
  });
}, 30000);

F.wbws[wbid].on('close', function close() {
  clearInterval(F.wbws[wbid].interval);
});
D.subs[wbid] = [];
D.reSubs[wbid] = [];
var absent = !0;
for (var key in F.mongoose.connection.models) {
if (key == wbid) absent = !1;
}
if (absent) {
F.wb[wbid] = F.mongoose.model(wbid, {
id: {
type: String,
default: 'id'
},
msg: {
type: String
},
nickname: {
type: String
},
client: {
type: String
},
date: {
type: Number
},
x: {
type: Number
},
y: {
type: Number
},
strokeWidth: {
type: Number
},
segments: {
type: Array
},
shadowColor: {
type: String
},
shadowWidth: {
type: Number
},
shadowX: {
type: Number
},
shadowY: {
type: Number
},
strokeColor: {
type: String
},
opacity: {
type: Number
},
color: {
type: String
},
lineCap: {
type: String
},
lineJoin: {
type: String
},
fontWidth: {
type: Number
},
font: {
type: String
},
reply: {
type: Number
},
width: {
type: Number
},
height: {
type: Number
},
deg: {
type: Number
},
imageWidth: {
type: Number
},
imageHeight: {
type: Number
},
image: {
type: String
},
closed: {
type: Boolean
},
gradient: {
type: Object
},
strokeGradient: {
type: Object
}
})
}
}
/return


/return
F.host = function (req, res) {
    var reqpath = req.url.toString().split('?')[0];
    if (reqpath.includes('wb_')) {
    F.host$wb(req, res, reqpath);
return
}
if (reqpath.includes('msg_')) {
F.host$msg(req, res, reqpath);
return
}
if (reqpath == '/newWhiteboard') {
F.host$newWhiteboard(req, res, reqpath);
return;
}
if (reqpath == '/register') {
F.host$register(req, res, reqpath);
return;
}
if (reqpath == '/repell') {
F.host$repell(req, res, reqpath);
return;
}
if (reqpath == '/resub') {
F.host$resub(req, res, reqpath);
return;
}
if (reqpath == '/server') {
F.host$server(req, res, reqpath);
return;
}
if (reqpath == '/chatclients') {
F.host$chatclients(req, res, reqpath);
return;
}
if (reqpath.includes('/users/')) {
F.host$users(req, res, reqpath);
return;
}
    var file = path.join(dir, reqpath.replace(/\/$/, '/index.html'));
    if (file.indexOf(dir + path.sep) !== 0) {
        res.statusCode = 403;
        res.setHeader('Content-Type', 'text/plain');
        return res.end('Forbidden');
    }
    var s = fs.createReadStream(file);
    var type = D.mime[path.extname(file).slice(1)] || 'text/plain';
    s.on('open', function () {
        res.setHeader('Content-Type', type);res.setHeader('Content-Type', type + '; charset=utf-8');
        s.pipe(res);
    });
    s.on('error', function () {
        res.setHeader('Content-Type', 'text/plain');
        res.statusCode = 404;
        res.end('Not found');
    });
}
/return


/return
F.addToBase = function(message)  {
var obj = JSON.parse(message);
new Message({
nickname: obj.nickname.toString().substr(0, 64),
msg: obj.msg.toString().substr(0, 4096),
date: obj.date.toString().substr(0, 15),
client: obj.client.toString().substr(0, 20)
}).save();
    }
/return


/return
F.genList = (msg) => {
var resp = "/list\n";
resp += (msg) ? "/del_" + (msg.message_id) + "\n" : "";
resp += "/rmrg_\n";
F.bot._textRegexpCallbacks.forEach((it, i, arr) => {
if (it.regexp)
resp += (B.C[i] ? "[-]" : "[+]") + " /vcb_" + i + " " + "/rmrg_" + i + " " + it.regexp+ "\n"
})
return resp
}
/return


/return
F.genFList = (msg) => {
var resp = "/flist\n";
resp += (msg) ? "/del_" + (msg.message_id) + "\n" : "";
for (var key in F) {
resp += (B.F[key] ? "[-]" : "[+]") +  "/vf_" + key + "\n"
}
return resp
}
/return


/return
F.rand = function randomId(len, pattern) {
  if (!len) len = 30;
  if (!pattern) pattern = 'aA0';

  var chars = '';

  pattern.split('').forEach((a) => {
    if (!isNaN(parseInt(a))) {
      chars += possibilities.numbers;
    } else if (/[a-z]/.test(a)) {
      chars += possibilities.lowerCased;
    } else if (/[A-Z]/.test(a)) {
      chars += possibilities.capitals;
    } else {
      chars += possibilities.special;
    }
  });

  var result = '';

  for (var i = 0; i < len; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length)); 
  }

  return result;
}
/return


/return
F.download = function(url, dest){
  var file = fs.createWriteStream(dest);
  return new Promise((resolve, reject) => {
    var responseSent = false;
    https.get(url, response => {
      response.pipe(file);
      file.on('finish', () =>{
        file.close(() => {
          if(responseSent)  return;
          responseSent = true;
          resolve();
        });
      });
    }).on('error', err => {
        if(responseSent)  return;
        responseSent = true;
        reject(err);
    });
  });
}
/return


/return
F.keyboardReplyHandler = (usrMsg) => {
    switch (usrMsg.text) {
        case "⚉":
            D.charset = (D.charset == "en") ? "ru" : "en";
            break;
        case "#1?":
            if (D.charsetType == "num") D.numCharset = "sym";
            D.charsetType = "num";
            D.numCharset = "sym";
            D.numSymCharset = "alpha"
            break;
        case "ABC":
            D.charsetType = "sym";
            break;
        case "123":
            D.charsetType = "num";
            D.numCharset = "num";
            break;
        case "=<":
            D.charsetType = "num";
            D.numSymCharset = "beta";
            D.numCharset = "sym";
            break;
        case "⌫":
            D.text = D.text.slice(0, -1);
            break;
        case "␣":
            D.text += " ";
            break;
        case "⏎":
            D.text += "\n";
            break;
        default:
            if (D.text[D.text.length - 1] == "⇧") D.text = D.text.slice(0, -1) + usrMsg.text.toUpperCase();
            else D.text += usrMsg.text;
    }
    switch (usrMsg.text) {
        case "⚉":
        case "#1?":
        case "ABC":
        case "123":
        case "=<":
            F.bot.deleteMessage(D.tagMsg.chat.id, D.tagMsg.message_id);
            F.bot.deleteMessage(D.botMsg.chat.id, D.botMsg.message_id);
            F.bot.removeReplyListener(D.replyListenerId);
            F.keyboardRender(usrMsg);
            break;
        default:
            F.bot.editMessageText(D.text + "|", {
                chat_id: D.botMsg.chat.id,
                message_id: D.botMsg.message_id
            }).catch((err) => {
                F.bot.sendMessage(usrMsg.chat.id, "#Баг: " + JSON.stringify(err)).then((msg) => {
                    setTimeout(() => {F.bot.deleteMessage(msg.chat.id, msg.message_id)}, 1500)
                });
            });
    }
    F.bot.deleteMessage(usrMsg.chat.id, usrMsg.message_id);
}
/return


/return
F.keyboardRender = (msg) => {
    if (typeof D.text != "string") D.text = "";
    const opts = {
        reply_markup: JSON.stringify({
            keyboard: (D.charsetType == "num") ? (D.numCharset == "sym") ?
                (D.numSymCharset == "alpha") ? D.charsets.numSymAlpha :
                D.charsets.numSymBeta : D.charsets.numNum : (D.charset == "en") ?
                D.charsets.symEn : D.charsets.symRu
        })
    };
    F.bot.sendMessage(msg.chat.id, "#ТегКлавиатуры", opts).then((msg) => {
        D.tagMsg = msg;
        F.bot.sendMessage(msg.chat.id, "|", {
            reply_to_message_id: msg.message_id
        }).then((msg) => {
            D.botMsg = msg;
            D.replyListenerId = F.bot.onReplyToMessage(msg.chat.id, D.tagMsg.message_id, F.keyboardReplyHandler)
        });
    });
}
/return


/return
F.pipeStdout = () => {
const sp = F.execa('dash', ['-c', D.dashSpell]);
D.pid = sp.pid;
F.sp[D.pid] =  sp;
F.bot.sendMessage(msg.chat.id, Object.keys(sp.stdout))
sp.stdout.pipe(F.what);
return sp
}
/return


/return
F.delLogs = (bmsg) => {
D.i = 0;
while (D.i < D.toDelete.length) {
F.bot.deleteMessage(bmsg.chat.id, D.toDelete[D.i]);
delete D.toDelete[D.i];
D.i++
}
if (bmsg) D.toDelete.push(bmsg.message_id);
}
/return


/return
F.genDList = (msg) => {
var resp = "/dlist\n";
resp += (msg) ? "/del_" + (msg.message_id) + "\n" : "";
for (var key in D) {
if (typeof F[key] == "object")
for (var keyk in D[key]) {
resp += "/vd_" + key + '_' + keyk + "\n"
}
else resp += (B.D[key] ? "[-]" : "[+]") + " /vd_" + key + "\n"
}
return resp
}
/return


/return
F.genFOList = (msg) => {
var resp = "/folist\n";
resp += (msg) ? "/del_" + (msg.message_id) + "\n" : "";
for (var key in F) {
resp += "/vf_" + key + "\n"
}
return resp
}
/return


/return
F.genBackup = () => {
var resp = "";
F.bot._textRegexpCallbacks.forEach((it, i, arr) => {
if (it.regexp && !B.C[i]) {
resp += "/ret" + "urn\nF.bot.onText(" + it.regexp + ", " + it.callback.toString() + "); undefined \n/ret" + "urn\n\n\n"
}
});

for (var key in F) {
if (!B.F[key]) resp += "/ret" + "urn\nF." + key + " = " + F[key].toString() + "\n/ret" + "urn\n\n\n"
}

for (var key in D) {
if (!B.D[key]) resp += "/ret" + "urn\nD." + key + " = " + JSON.stringify(D[key]) + "; undefined\n/ret" + "urn\n\n\n"
}

resp += "/ret" + "urn\nB = " + JSON.stringify(B) + 
"; undefined\n/ret" + "urn\n\n\n"

for (var key in S) {
if (!B.S[key]) resp += "/ret" + "urn\nS." + key + " = " + S[key].toString() + "\nS." + key + "(); \n/ret" + "urn\n\n\n"
}

return resp
}
/return


/return
F.genSList = (msg) => {
var resp = "/slist\n";
resp += (msg) ? "/del_" + (msg.message_id) + "\n" : "";
for (var key in S) {
resp += (B.S[key] ? "[-]" : "[+]") +  "/vs_" + key + "\n"
}
return resp
}
/return


/return
F.deleteScamByDate = function(date, date2) {
date2 = date2 || Infinity;
Message.find({}, function(err, messages) {
for (var i = 0; i < messages.length; i++) {
if (messages[i].date * 1 >= date * 1 && messages[i].date * 1 <= date2 ) messages[i].remove(() => {});
}
  });
}
/return


/return
F.heartbeat = () => { this.isAlive = true;
}
/return


/return
F.genID = function() {
return Math.random().toString(16).slice(2)
}
/return


/return
F.noWB = (reqpath, wbid) => { }
/return


/return
F.host$resub = function(req, res, reqpath, wbid) {
res.statusCode = 201;
res.end("OMG");

var body = "";
req.on('data', (data) => {
body += data;
});
req.on('end', () => {

var obj = JSON.parse(body);
if (obj.subscription) {
for (var i = 0; i < D.reSubs[obj.wbid].length; i++) {
if (JSON.parse(obj.subscription).keys.auth == D.reSubs[obj.wbid][i].keys.auth) {
D.subs[obj.wbid].push(D.reSubs[obj.wbid][i]);
D.reSubs[obj.wbid].splice(i, 1);
}
}

}
});
}
/return


/return
F.host$register = function(req, res, reqpath, wbid) {
var body = "";
req.on('data', (data) => {
body += data;
});
req.on('end', () => {
var obj = JSON.parse(body);
if (obj.subscription) {
for (var i = 0; i < D.subs[obj.wbid].length; i++) {
if (obj.subscription.keys.auth == D.reSubs[obj.wbid][i].keys.auth) D.reSubs[obj.wbid].splice(i, 1);
}
for (var i = 0; i < D.subs[obj.wbid].length; i++) {
if (obj.subscription.keys.auth == D.subs[obj.wbid][i].keys.auth) D.subs[obj.wbid].splice(i, 1);
}
if (!obj.remove) D.reSubs[obj.wbid].push(obj.subscription)
res.statusCode = 201;
res.end();
}
});
}
/return


/return
F.host$repell = function(req, res, reqpath, wbid) {
var body = "";
req.on('data', (data) => {
body += data;
});
req.on('end', () => {
var obj = JSON.parse(body);
if (obj.subscription) {
for (var i = 0; i < D.subs[obj.wbid].length; i++) {
if (JSON.parse(obj.subscription).keys.auth == D.subs[obj.wbid][i].keys.auth) {
D.reSubs[obj.wbid].push(D.subs[obj.wbid][i]);
D.subs[obj.wbid].splice(i, 1);
}
}
res.statusCode = 201;
res.end();
}
});
}
/return


/return
F.host$wb = function(req, res, reqpath) {
    var wbid = reqpath.split('/')[1];
    if (F.wb[wbid]) {
    F.wb[wbid].find({}, function(err, messages) {
var arr = []; messages.forEach(function(record) {
       if (!record.msg || record.msg == "") arr.push(record)
    });
res.end(JSON.stringify(arr))
  });
  } else {
res.statusCode = 404;
res.end('Not found')
}
}
/return


/return
F.host$msg = function(req, res, reqpath, wbid) {
var page = req.url.toString().split('?')[1];
    var wbid = "wb_" + reqpath.split('msg_')[1];
    if (F.wb[wbid]) {
    F.wb[wbid].find({}, function(err, el) {
var msgarr = [];
var messages = [];
for (var i = 0; i < el.length; i++) {
if (el[i].msg) {
  if (el[i].msg.length > 0) {
messages.push(el[i])
}
}
}
var i = messages.length - 60 * page;
for (i = (i < 0) ? 0 : i; i < messages.length - (-60 + page * 60); i++) {
if (messages[i].msg) {
  if (messages[i].msg.length > 0) {
  var obj = {nickname: messages[i].nickname, msg: messages[i].msg, date: messages[i].date, client: messages[i].client}
  if (messages[i].reply) {
  obj.reply = messages[i].reply;
messages.forEach((msg2) => {
if (obj.reply == msg2.date) obj.replyMsg = msg2.nickname.substring(0, 16) + ':  ' + msg2.msg.substring(0, 600);
});
  }
  msgarr.push(obj)
  }
}
    }
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');
res.end(JSON.stringify(msgarr))
  });
  } else {
res.statusCode = 404;
res.end('Not found')
}
}
/return


/return
F.host$chatclients = function(req, res, reqpath) {
var ips = {};
if (F.wbws[(req.url.toString().split('?')[1]) ? 'wb_' + req.url.toString().split('?')[1] : 'wb_messages']) {
F.wbws[(req.url.toString().split('?')[1]) ? 'wb_' + req.url.toString().split('?')[1] : 'wb_messages'].clients.forEach(function each(client) {
       ips[client.ip] = true;
    });
res.end(Object.keys(ips).length + "");
} else {
res.statusCode = 404;
res.end('Users cannot exist here');
}
}
/return


/return
F.host$users = function(req, res, reqpath) {
var id = reqpath.split('/').reverse()[0];
User.findOne({id: id}, (err, user) => {
if (user && user.nickname) res.end(user.nickname);
else {
res.statusCode = 404;
res.end('User not found');
}
});
}
/return


/return
F.host$server = function(req, res, reqpath) {
res.setHeader('Content-Type', 'text/plain; charset=utf-8');
res.end(F.genBackup());
}
/return


/return
F.host$newWhiteboard = function(req, res, reqpath) {
var id = 'wb_' + Math.random().toString().slice(2);
F.createwb(id);
res.end(id);
}
/return


/return
F.httphost = function(req, res) {
res.writeHead(301, { Location: 'https://' + req.headers.host});
res.end('aaa');
}
/return


/return
F.httpserver = [object Object]
/return


/return
F.undefined = [object Object]
/return


/return
F.webPush = [object Object]
/return


/return
F.TTI = [object Object]
/return


/return
F.textPhoto = (text, msg) => {
if (typeof text == "object") text = F.JSONBeautify(text, null, 2, 100);
var string = F.TTI.generateSync(text);
var regex = /^data:.+\/(.+);base64,(.*)$/;

var matches = string.match(regex);
var ext = matches[1];
var data = matches[2];
var buffer = Buffer.from(data, 'base64');
fs.writeFileSync('data.' + ext, buffer);
F.bot.sendPhoto(msg.chat.id, "data.png", {reply_to_message_id: msg.message_id});
}
/return


/return
F.JSONBeautify = function beautify (value, replacer, space, limit) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

  var i;
  gap = '';
  indent = '';

  if (!limit) limit = 0;

  if (typeof limit !== "number")
    throw new Error("beaufifier: limit must be a number");

// If the space parameter is a number, make an indent string containing that
// many spaces.

  if (typeof space === 'number') {
      for (i = 0; i < space; i += 1) {
          indent += ' ';
      }

// If the space parameter is a string, it will be used as the indent string.

  } else if (typeof space === 'string') {
      indent = space;
  }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

  rep = replacer;
  if (replacer && typeof replacer !== 'function' &&
          (typeof replacer !== 'object' ||
          typeof replacer.length !== 'number')) {
      throw new Error('beautifier: wrong replacer parameter');
  }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

  return str('', {'': value}, limit);
}
/return


/return
F.filePhoto = (name, msg) => {
var string = F.TTI.generateSync(fs.readFileSync(name));
var regex = /^data:.+\/(.+);base64,(.*)$/;

var matches = string.match(regex);
var ext = matches[1];
var data = matches[2];
var buffer = Buffer.from(data, 'base64');
fs.writeFileSync('data.' + ext, buffer);
F.bot.sendPhoto(msg.chat.id, "data.png", {reply_to_message_id: msg.message_id});
}
/return


/return
D.port = 443; undefined
/return


/return
D.chatPort = 2000; undefined
/return


/return
D.mime = {"html":"text/html","txt":"text/plain","css":"text/css","gif":"image/gif","jpg":"image/jpeg","png":"image/png","svg":"image/svg+xml","js":"application/javascript"}; undefined
/return


/return
D.charsets = {"numNum":[[{"text":"+"},{"text":"1"},{"text":"2"},{"text":"3"},{"text":"-"}],[{"text":"*"},{"text":"4"},{"text":"5"},{"text":"6"},{"text":"␣"}],[{"text":"/"},{"text":"7"},{"text":"8"},{"text":"9"},{"text":"⌫"}],[{"text":"ABC"},{"text":"#1?"},{"text":","},{"text":"␣"},{"text":"0"},{"text":"."},{"text":"⏎"}]],"numSymAlpha":[[{"text":"1"},{"text":"2"},{"text":"3"},{"text":"4"},{"text":"5"},{"text":"6"},{"text":"7"},{"text":"8"},{"text":"9"},{"text":"0"}],[{"text":"&"},{"text":"#"},{"text":"$"},{"text":"%"},{"text":"_"},{"text":"-"},{"text":"+"},{"text":"("},{"text":")"},{"text":"/"}],[{"text":"=<"},{"text":"@"},{"text":"*"},{"text":" \""},{"text":"'"},{"text":":"},{"text":";"},{"text":"!"},{"text":"?"},{"text":"⌫"}],[{"text":"ABC"},{"text":"123"},{"text":","},{"text":"⬅️"},{"text":"➡️"},{"text":"⬆️"},{"text":"⬇️"},{"text":"⏹"},{"text":"␣"},{"text":"."},{"text":"⏎"}]],"numSymBeta":[[{"text":"1"},{"text":"2"},{"text":"3"},{"text":"4"},{"text":"5"},{"text":"6"},{"text":"7"},{"text":"8"},{"text":"9"},{"text":"0"}],[{"text":"×"},{"text":"÷"},{"text":"^"},{"text":"√"},{"text":"∆"},{"text":"-"},{"text":"+"},{"text":"<"},{"text":">"},{"text":"="}],[{"text":"#1?"},{"text":"α"},{"text":"°"},{"text":"•"},{"text":"|"},{"text":"{"},{"text":"}"},{"text":"["},{"text":"]"},{"text":"⌫"}],[{"text":"ABC"},{"text":"123"},{"text":","},{"text":"⬅️"},{"text":"➡️"},{"text":"⬆️"},{"text":"⬇️"},{"text":"⏹"},{"text":"␣"},{"text":"."},{"text":"⏎"}]],"symEn":[[{"text":"q"},{"text":"w"},{"text":"e"},{"text":"r"},{"text":"t"},{"text":"y"},{"text":"u"},{"text":"i"},{"text":"o"},{"text":"p"}],[{"text":"a"},{"text":"s"},{"text":"d"},{"text":"f"},{"text":"g"},{"text":"h"},{"text":"j"},{"text":"k"},{"text":"l"}],[{"text":"⇧"},{"text":"z"},{"text":"x"},{"text":"c"},{"text":"v"},{"text":"b"},{"text":"n"},{"text":"m"},{"text":"⌫"}],[{"text":"#1?"},{"text":"⚉"},{"text":","},{"text":"⬅️"},{"text":"➡️"},{"text":"⬆️"},{"text":"⬇️"},{"text":"⏹"},{"text":"␣"},{"text":"."},{"text":"⏎"}]],"symRu":[[{"text":"й"},{"text":"ц"},{"text":"у"},{"text":"к"},{"text":"е"},{"text":"н"},{"text":"г"},{"text":"ш"},{"text":"щ"},{"text":"з"},{"text":"х"}],[{"text":"ф"},{"text":"ы"},{"text":"в"},{"text":"а"},{"text":"п"},{"text":"р"},{"text":"о"},{"text":"л"},{"text":"д"},{"text":"ж"},{"text":"э"}],[{"text":"⇧"},{"text":"я"},{"text":"ч"},{"text":"с"},{"text":"м"},{"text":"и"},{"text":"т"},{"text":"ь"},{"text":"б"},{"text":"ю"},{"text":"⌫"}],[{"text":"#1?"},{"text":"⚉"},{"text":","},{"text":"⬅️"},{"text":"➡️"},{"text":"⬆️"},{"text":"⬇️"},{"text":"⏹"},{"text":"␣"},{"text":"."},{"text":"⏎"}]]}; undefined
/return


/return
D.charset = "ru"; undefined
/return


/return
D.charsetType = "sym"; undefined
/return


/return
D.numCharset = "sym"; undefined
/return


/return
D.numSymCharset = "alpha"; undefined
/return


/return
D.listFOMsg = {"message_id":487884,"from":{"id":2132778052,"is_bot":true,"first_name":"crutch.js","username":"nfjkcicicjcnfnvfnbot"},"chat":{"id":-1001609661635,"title":"Mon 00:16 roundraw-crutch","username":"roundrawcrutch","type":"supergroup"},"date":1682024619,"text":"_"}; undefined
/return


/return
D.listSMsg = {"message_id":3434,"from":{"id":2132778052,"is_bot":true,"first_name":"crutch.js","username":"nfjkcicicjcnfnvfnbot"},"chat":{"id":-1002063399226,"title":"Nil, noopdie, Instable Imagination, crutch.js","type":"supergroup"},"date":1718709671,"text":"_"}; undefined
/return


/return
D.everyReq = 242584; undefined
/return


/return
D.pid = 486962; undefined
/return


/return
B = {"D":{"i":true,"listDMsg":true,"dashSpell":true,"toDelete":true,"replyListenerId":true,"botMsg":true,"tagMsg":true,"listFMsg":true,"toF":true,"toInstall":true,"text":true,"listMsg":true,"subs":true,"reSubs":true,"mainChat":true},"F":{"imgy":true,"img":true,"fs":true,"wordgen":true,"execa":true,"rwg":true,"wss":true,"ws":true,"mongoose":true,"bot":true,"server":true,"imge":true,"imga":true,"tInt":true,"what":true,"sp":true,"wb":true,"wbws":true,"random-id":true,"figureProcess":true},"S":{"initwbs":true,"msgbroadcast":true},"C":{"0":true,"40":true,"54":true}}; undefined
/return


/return
S.fatalError = () => {
process.on('uncaughtException', (err) => { F.bot.sendMessage(msg.chat.id, err.message) });
}
S.fatalError(); 
/return


/return
S.mongodb = () => {
F.mongoose = require('mongoose');
F.mongoose.connect('mongodb://noopdie:' + process.env.DBTOKEN.split(':')[1] + '@localhost:27017/admin', function(err, res) {
  if (err) {
    F.bot.sendMessage(msg.chat.id, 'ERROR connecting to:. ' + err);
  } else {
    F.bot.sendMessage(msg.chat.id, 'Succeeded connected to: ' + err);
  }
});
}
S.mongodb(); 
/return


/return
S.server = () => {
path = require('path');
https = require('https');
fs = require('fs');
dir = path.join('files');


F.server = https.createServer({
  key: fs.readFileSync('/etc/letsencrypt/live/noopdie.com/privkey.pem'),
  cert: fs.readFileSync('/etc/letsencrypt/live/noopdie.com/fullchain.pem')
}, function(req, res) {
F.host(req,res)
});
F.server.listen(D.port, function () {
    F.bot.sendMessage(msg.chat.id, 'Listening on http://noopdie.com:80/');
});
}
S.server(); 
/return


/return
S.wsgive = () => {
F.wb = {};
F.wbws = {};
F.server.on('upgrade', function upgrade(request, socket, head) {
var reqpath = request.url.toString().split('?')[0];
var wbid = reqpath.split('/')[1];
    if (reqpath.includes('wb_')) {
    if (F.wbws[wbid]) {
    F.wbws[wbid].handleUpgrade(request, socket, head, function done(ws) {
      F.wbws[wbid].emit('connection', ws, request);
    });
    } else F.noWB(request.url, wbid)
  } else {
    socket.destroy();
  }
});
}
S.wsgive(); 
/return


/return
S.wsserver = () => {
F.ws = require("ws").Server;
F.wss = new F.ws({port:D.chatPort});
F.wss.on('connection', function connection(socket) {
    socket.on('message', function(message) {
       F.wss.broadcast(message);
       F.addToBase(message);
    });

});
F.wss.broadcast = function broadcast(msg) {
   F.wss.clients.forEach(function each(client) {
       client.send(msg);
    });
};
}
S.wsserver(); 
/return


/return
S.msgmodel = () => {
Message = F.mongoose.model('Message', {
  nickname: {
      type: String,
      default: 'Никнейм'
   },
msg: {
type: String,
default: 'message'
},
date: {
type: String,
default: '01:01 00:00'
},
client: {
type: String,
default: 'zero'
}
});
}
S.msgmodel(); 
/return


/return
S.usermodel = () => {
User = F.mongoose.model('User', {
  nickname: {
      type: String,
      default: 'Никнейм'
   },
id: {
type: String,
default: '1234'
}
});
}
S.usermodel(); 
/return


/return
S.httpserver = () => {
 http = require('http');

F.httpserver = http.createServer(function(req, res) {
F.httphost(req,res)
});
F.httpserver.listen(80, function () {
    F.bot.sendMessage(msg.chat.id, 'Listening on http://noopdie.com:80/');
});
}
S.httpserver(); 
/return

